// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'service_item.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ServiceItem _$ServiceItemFromJson(Map<String, dynamic> json) => ServiceItem(
      patientId: json['PatientID'],
      itemId: json['ItemId'],
      invoiceId: json['InvoiceID'],
      receiptId: json['ReceiptId'],
      patientAdmissionId: json['PatientAdmissionId'],
      nurseStationId: json['NurseStationId'],
      serviceListPrice: json['ServiceListPrice'],
      serviceActualPrice: json['ServiceActualPrice'],
      serviceQuantity: json['ServiceQuantity'],
      serviceDate: json['ServiceDate'] as String?,
      referralPaidDate: json['ReferralPaidDate'],
      modifiedDate: json['ModifiedDate'],
      checkoutTime: json['CheckoutTime'],
      serviceProviderId: json['ServiceProviderId'],
      doctorId: json['DoctorId'],
      doctorName: json['DoctorName'] as String?,
      returnQantity: json['ReturnQantity'],
      returnPrice: json['ReturnPrice'],
      returnPaid: json['ReturnPaid'],
      referrerPaidUserId: json['ReferrerPaidUserId'],
      referrerPaidUser: json['ReferrerPaidUser'],
      discount: json['Discount'],
      discountAfterInvoice: json['DiscountAfterInvoice'] as bool?,
      isBothSideDiscount: json['IsBothSideDiscount'] as bool?,
      discountPercentage: json['DiscountPercentage'],
      refund: json['Refund'] as bool?,
      refundApprovedBy: json['RefundApprovedBy'],
      refundStatus: json['RefundStatus'],
      refundApproval: json['RefundApproval'] as bool?,
      isReturn: json['IsReturn'] as bool?,
      refundNote: json['RefundNote'],
      billed: json['Billed'] as bool?,
      referralFee: json['ReferralFee'],
      referralFeePaid: json['ReferralFeePaid'] as bool?,
      referralFeeActual: json['ReferralFeeActual'],
      deliveryDate: json['DeliveryDate'] as String?,
      deliveryTime: json['DeliveryTime'],
      reportFormatName: json['ReportFormatName'],
      labStatusId: json['LabStatusId'],
      inventoryId: json['InventoryId'],
      modifiedBy: json['ModifiedBy'],
      prescriptionItemId: json['PrescriptionItemId'],
      sampleId: json['SampleId'],
      sl: json['Sl'] as String?,
      isSpecialItem: json['IsSpecialItem'] as bool?,
      packageItemId: json['PackageItemId'],
      packageSeviceId: json['PackageSeviceId'],
      slideNumber: json['SlideNumber'],
      signApprovedDate: json['SignApprovedDate'],
      signApprovedBy: json['SignApprovedBy'],
      isForeignMission: json['IsForeignMission'] as bool?,
      isBarCodePrint: json['IsBarCodePrint'] as bool?,
      signApprovedByUser: json['SignApprovedByUser'],
      labStatus: json['LabStatus'],
      inventory: json['Inventory'],
      user: json['User'],
      patient: json['Patient'] == null
          ? null
          : Patient.fromJson(json['Patient'] as Map<String, dynamic>),
      patientInvoice: json['PatientInvoice'],
      prescriptionItem: json['PrescriptionItem'],
      nurseStation: json['NurseStation'],
      receiptPayment: json['ReceiptPayment'],
      patientAdmission: json['PatientAdmission'],
      imagingDetails: json['ImagingDetails'] as List<dynamic>?,
      patientServicePayments: json['PatientServicePayments'],
      signContactId: json['SignContactId'],
      isgroup: json['Isgroup'] as bool?,
      patientServiceIds: json['PatientServiceIds'],
      groupItemIds: json['GroupItemIds'],
      medicalTypeId: json['MedicalTypeId'],
      beforeReturnPrice: json['BeforeReturnPrice'],
      returnBackupPrice: json['ReturnBackupPrice'],
      fullReturnServiceListPrice: json['FullReturnServiceListPrice'],
      amount: json['Amount'],
      medicalTypeName: json['MedicalTypeName'],
      previousDoctorName: json['PreviousDoctorName'],
      hasImage: json['HasImage'] as bool?,
      branchId: json['BranchId'],
      branch: json['Branch'],
      tenantId: json['TenantId'],
      tenant: json['Tenant'],
      id: json['Id'],
      active: json['Active'] as bool?,
      userId: json['UserId'],
      hasErrors: json['HasErrors'] as bool?,
      errorCount: json['ErrorCount'],
      noErrors: json['NoErrors'] as bool?,
    );

Map<String, dynamic> _$ServiceItemToJson(ServiceItem instance) =>
    <String, dynamic>{
      'PatientID': instance.patientId,
      'ItemId': instance.itemId,
      'InvoiceID': instance.invoiceId,
      'ReceiptId': instance.receiptId,
      'PatientAdmissionId': instance.patientAdmissionId,
      'NurseStationId': instance.nurseStationId,
      'ServiceListPrice': instance.serviceListPrice,
      'ServiceActualPrice': instance.serviceActualPrice,
      'ServiceQuantity': instance.serviceQuantity,
      'ServiceDate': instance.serviceDate,
      'ReferralPaidDate': instance.referralPaidDate,
      'ModifiedDate': instance.modifiedDate,
      'CheckoutTime': instance.checkoutTime,
      'ServiceProviderId': instance.serviceProviderId,
      'DoctorId': instance.doctorId,
      'DoctorName': instance.doctorName,
      'ReturnQantity': instance.returnQantity,
      'ReturnPrice': instance.returnPrice,
      'ReturnPaid': instance.returnPaid,
      'ReferrerPaidUserId': instance.referrerPaidUserId,
      'ReferrerPaidUser': instance.referrerPaidUser,
      'Discount': instance.discount,
      'DiscountAfterInvoice': instance.discountAfterInvoice,
      'IsBothSideDiscount': instance.isBothSideDiscount,
      'DiscountPercentage': instance.discountPercentage,
      'Refund': instance.refund,
      'RefundApprovedBy': instance.refundApprovedBy,
      'RefundStatus': instance.refundStatus,
      'RefundApproval': instance.refundApproval,
      'IsReturn': instance.isReturn,
      'RefundNote': instance.refundNote,
      'Billed': instance.billed,
      'ReferralFee': instance.referralFee,
      'ReferralFeePaid': instance.referralFeePaid,
      'ReferralFeeActual': instance.referralFeeActual,
      'DeliveryDate': instance.deliveryDate,
      'DeliveryTime': instance.deliveryTime,
      'ReportFormatName': instance.reportFormatName,
      'LabStatusId': instance.labStatusId,
      'InventoryId': instance.inventoryId,
      'ModifiedBy': instance.modifiedBy,
      'PrescriptionItemId': instance.prescriptionItemId,
      'SampleId': instance.sampleId,
      'Sl': instance.sl,
      'IsSpecialItem': instance.isSpecialItem,
      'PackageItemId': instance.packageItemId,
      'PackageSeviceId': instance.packageSeviceId,
      'SlideNumber': instance.slideNumber,
      'SignApprovedDate': instance.signApprovedDate,
      'SignApprovedBy': instance.signApprovedBy,
      'IsForeignMission': instance.isForeignMission,
      'IsBarCodePrint': instance.isBarCodePrint,
      'SignApprovedByUser': instance.signApprovedByUser,
      'LabStatus': instance.labStatus,
      'Inventory': instance.inventory,
      'User': instance.user,
      'Patient': instance.patient,
      'PatientInvoice': instance.patientInvoice,
      'PrescriptionItem': instance.prescriptionItem,
      'NurseStation': instance.nurseStation,
      'ReceiptPayment': instance.receiptPayment,
      'PatientAdmission': instance.patientAdmission,
      'ImagingDetails': instance.imagingDetails,
      'PatientServicePayments': instance.patientServicePayments,
      'SignContactId': instance.signContactId,
      'Isgroup': instance.isgroup,
      'PatientServiceIds': instance.patientServiceIds,
      'GroupItemIds': instance.groupItemIds,
      'MedicalTypeId': instance.medicalTypeId,
      'BeforeReturnPrice': instance.beforeReturnPrice,
      'ReturnBackupPrice': instance.returnBackupPrice,
      'FullReturnServiceListPrice': instance.fullReturnServiceListPrice,
      'Amount': instance.amount,
      'MedicalTypeName': instance.medicalTypeName,
      'PreviousDoctorName': instance.previousDoctorName,
      'HasImage': instance.hasImage,
      'BranchId': instance.branchId,
      'Branch': instance.branch,
      'TenantId': instance.tenantId,
      'Tenant': instance.tenant,
      'Id': instance.id,
      'Active': instance.active,
      'UserId': instance.userId,
      'HasErrors': instance.hasErrors,
      'ErrorCount': instance.errorCount,
      'NoErrors': instance.noErrors,
    };
